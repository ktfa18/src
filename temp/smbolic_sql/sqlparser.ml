type token =
  | NAME of (string)
  | STRING of (string)
  | INTNUM of (int)
  | BOOL of (bool)
  | APPROXNUM of (float)
  | ADD
  | ALL
  | ALTER
  | ANALYZE
  | AND
  | ANY
  | AS
  | ASC
  | AUTO_INCREMENT
  | BEFORE
  | BETWEEN
  | BIGINT
  | BINARY
  | BIT
  | BLOB
  | BOTH
  | BY
  | CALL
  | CASCADE
  | CASE
  | CHANGE
  | CHAR
  | CHECK
  | COLLATE
  | COLUMN
  | COMMENT
  | CONDITION
  | CONSTRAINT
  | CONTINUE
  | CONVERT
  | CREATE
  | CROSS
  | CURRENT_DATE
  | CURRENT_TIME
  | CURRENT_TIMESTAMP
  | CURRENT_USER
  | CURSOR
  | DATABASE
  | DATABASES
  | DATE
  | DATETIME
  | DAY_HOUR
  | DAY_MICROSECOND
  | DAY_MINUTE
  | DAY_SECOND
  | DECIMAL
  | DECLARE
  | DEFAULT
  | DELAYED
  | DELETE
  | DESC
  | DESCRIBE
  | DETERMINISTIC
  | DISTINCT
  | DISTINCTROW
  | DIV
  | DOUBLE
  | DROP
  | DUAL
  | EACH
  | ELSE
  | ELSEIF
  | ENCLOSED
  | END
  | ENUM
  | ESCAPE
  | ESCAPED
  | EXISTS
  | EXIT
  | EXPLAIN
  | FETCH
  | FLOAT
  | FOR
  | FORCE
  | FOREIGN
  | FROM
  | FULLTEXT
  | GRANT
  | GROUP
  | HAVING
  | HIGH_PRIORITY
  | HOUR_MICROSECOND
  | HOUR_MINUTE
  | HOUR_SECOND
  | IF
  | IGNORE
  | IN
  | INDEX
  | INFILE
  | INNER
  | INOUT
  | INSENSITIVE
  | INSERT
  | INTEGER
  | INTERVAL
  | INTO
  | IS
  | ITERATE
  | JOIN
  | KEY
  | KEYS
  | KILL
  | LEADING
  | LEAVE
  | LEFT
  | LIKE
  | LIMIT
  | LINES
  | LOAD
  | LOCALTIME
  | LOCALTIMESTAMP
  | LOCK
  | LONG
  | LONGBLOB
  | LONGTEXT
  | LOOP
  | LOW_PRIORITY
  | MATCH
  | MEDIUMBLOB
  | MEDIUMINT
  | MEDIUMTEXT
  | MINUTE_MICROSECOND
  | MINUTE_SECOND
  | MOD
  | MODIFIES
  | NATURAL
  | NOT
  | NO_WRITE_TO_BINLOG
  | NULLX
  | NUMBER
  | ON
  | ONDUPLICATE
  | OPTIMIZE
  | OPTION
  | OPTIONALLY
  | OR
  | ORDER
  | OUT
  | OUTER
  | OUTFILE
  | PRECISION
  | PRIMARY
  | PROCEDURE
  | PURGE
  | QUICK
  | READ
  | READS
  | REAL
  | REFERENCES
  | REGEXP
  | RELEASE
  | RENAME
  | REPEAT
  | REPLACE
  | REQUIRE
  | RESTRICT
  | RETURN
  | REVOKE
  | RIGHT
  | ROLLUP
  | SCHEMA
  | SCHEMAS
  | SECOND_MICROSECOND
  | SELECT
  | SENSITIVE
  | SEPARATOR
  | SET
  | SHOW
  | SMALLINT
  | SOME
  | SONAME
  | SPATIAL
  | SPECIFIC
  | SQL
  | SQLEXCEPTION
  | SQLSTATE
  | SQLWARNING
  | SQL_BIG_RESULT
  | SQL_CALC_FOUND_ROWS
  | SQL_SMALL_RESULT
  | SSL
  | STARTING
  | STRAIGHT_JOIN
  | TABLE
  | TEMPORARY
  | TEXT
  | TERMINATED
  | THEN
  | TIME
  | TIMESTAMP
  | TINYBLOB
  | TINYINT
  | TINYTEXT
  | TO
  | TRAILING
  | TRIGGER
  | UNDO
  | UNION
  | UNIQUE
  | UNLOCK
  | UNSIGNED
  | UPDATE
  | USAGE
  | USE
  | USING
  | UTC_DATE
  | UTC_TIME
  | UTC_TIMESTAMP
  | VALUES
  | VARBINARY
  | VARCHAR
  | VARYING
  | WHEN
  | WHERE
  | WHILE
  | WITH
  | WRITE
  | XOR
  | YEAR
  | YEAR_MONTH
  | ZEROFILL
  | PLUS
  | MINUS
  | SLASH
  | ASTERISK
  | EQUAL
  | GREATEREQUAL
  | GREATER
  | LESSEQUAL
  | LESS
  | NOTEQUAL
  | AMPERSAND
  | TILDE
  | VERTICALBAR
  | HAT
  | PERCENT
  | LPAREN
  | RPAREN
  | COMMA
  | DOT
  | COLON
  | SEMICOLON
  | EXCLAMATION
  | APOSTROPHE
  | EOF
  | COMPARISON of (string)

open Parsing;;
let _ = parse_error;;
# 1 "sqlparser.mly"
  
open Sqlsyntax
# 260 "sqlparser.ml"
let yytransl_const = [|
  262 (* ADD *);
  263 (* ALL *);
  264 (* ALTER *);
  265 (* ANALYZE *);
  266 (* AND *);
  267 (* ANY *);
  268 (* AS *);
  269 (* ASC *);
  270 (* AUTO_INCREMENT *);
  271 (* BEFORE *);
  272 (* BETWEEN *);
  273 (* BIGINT *);
  274 (* BINARY *);
  275 (* BIT *);
  276 (* BLOB *);
  277 (* BOTH *);
  278 (* BY *);
  279 (* CALL *);
  280 (* CASCADE *);
  281 (* CASE *);
  282 (* CHANGE *);
  283 (* CHAR *);
  284 (* CHECK *);
  285 (* COLLATE *);
  286 (* COLUMN *);
  287 (* COMMENT *);
  288 (* CONDITION *);
  289 (* CONSTRAINT *);
  290 (* CONTINUE *);
  291 (* CONVERT *);
  292 (* CREATE *);
  293 (* CROSS *);
  294 (* CURRENT_DATE *);
  295 (* CURRENT_TIME *);
  296 (* CURRENT_TIMESTAMP *);
  297 (* CURRENT_USER *);
  298 (* CURSOR *);
  299 (* DATABASE *);
  300 (* DATABASES *);
  301 (* DATE *);
  302 (* DATETIME *);
  303 (* DAY_HOUR *);
  304 (* DAY_MICROSECOND *);
  305 (* DAY_MINUTE *);
  306 (* DAY_SECOND *);
  307 (* DECIMAL *);
  308 (* DECLARE *);
  309 (* DEFAULT *);
  310 (* DELAYED *);
  311 (* DELETE *);
  312 (* DESC *);
  313 (* DESCRIBE *);
  314 (* DETERMINISTIC *);
  315 (* DISTINCT *);
  316 (* DISTINCTROW *);
  317 (* DIV *);
  318 (* DOUBLE *);
  319 (* DROP *);
  320 (* DUAL *);
  321 (* EACH *);
  322 (* ELSE *);
  323 (* ELSEIF *);
  324 (* ENCLOSED *);
  325 (* END *);
  326 (* ENUM *);
  327 (* ESCAPE *);
  328 (* ESCAPED *);
  329 (* EXISTS *);
  330 (* EXIT *);
  331 (* EXPLAIN *);
  332 (* FETCH *);
  333 (* FLOAT *);
  334 (* FOR *);
  335 (* FORCE *);
  336 (* FOREIGN *);
  337 (* FROM *);
  338 (* FULLTEXT *);
  339 (* GRANT *);
  340 (* GROUP *);
  341 (* HAVING *);
  342 (* HIGH_PRIORITY *);
  343 (* HOUR_MICROSECOND *);
  344 (* HOUR_MINUTE *);
  345 (* HOUR_SECOND *);
  346 (* IF *);
  347 (* IGNORE *);
  348 (* IN *);
  349 (* INDEX *);
  350 (* INFILE *);
  351 (* INNER *);
  352 (* INOUT *);
  353 (* INSENSITIVE *);
  354 (* INSERT *);
  355 (* INTEGER *);
  356 (* INTERVAL *);
  357 (* INTO *);
  358 (* IS *);
  359 (* ITERATE *);
  360 (* JOIN *);
  361 (* KEY *);
  362 (* KEYS *);
  363 (* KILL *);
  364 (* LEADING *);
  365 (* LEAVE *);
  366 (* LEFT *);
  367 (* LIKE *);
  368 (* LIMIT *);
  369 (* LINES *);
  370 (* LOAD *);
  371 (* LOCALTIME *);
  372 (* LOCALTIMESTAMP *);
  373 (* LOCK *);
  374 (* LONG *);
  375 (* LONGBLOB *);
  376 (* LONGTEXT *);
  377 (* LOOP *);
  378 (* LOW_PRIORITY *);
  379 (* MATCH *);
  380 (* MEDIUMBLOB *);
  381 (* MEDIUMINT *);
  382 (* MEDIUMTEXT *);
  383 (* MINUTE_MICROSECOND *);
  384 (* MINUTE_SECOND *);
  385 (* MOD *);
  386 (* MODIFIES *);
  387 (* NATURAL *);
  388 (* NOT *);
  389 (* NO_WRITE_TO_BINLOG *);
  390 (* NULLX *);
  391 (* NUMBER *);
  392 (* ON *);
  393 (* ONDUPLICATE *);
  394 (* OPTIMIZE *);
  395 (* OPTION *);
  396 (* OPTIONALLY *);
  397 (* OR *);
  398 (* ORDER *);
  399 (* OUT *);
  400 (* OUTER *);
  401 (* OUTFILE *);
  402 (* PRECISION *);
  403 (* PRIMARY *);
  404 (* PROCEDURE *);
  405 (* PURGE *);
  406 (* QUICK *);
  407 (* READ *);
  408 (* READS *);
  409 (* REAL *);
  410 (* REFERENCES *);
  411 (* REGEXP *);
  412 (* RELEASE *);
  413 (* RENAME *);
  414 (* REPEAT *);
  415 (* REPLACE *);
  416 (* REQUIRE *);
  417 (* RESTRICT *);
  418 (* RETURN *);
  419 (* REVOKE *);
  420 (* RIGHT *);
  421 (* ROLLUP *);
  422 (* SCHEMA *);
  423 (* SCHEMAS *);
  424 (* SECOND_MICROSECOND *);
  425 (* SELECT *);
  426 (* SENSITIVE *);
  427 (* SEPARATOR *);
  428 (* SET *);
  429 (* SHOW *);
  430 (* SMALLINT *);
  431 (* SOME *);
  432 (* SONAME *);
  433 (* SPATIAL *);
  434 (* SPECIFIC *);
  435 (* SQL *);
  436 (* SQLEXCEPTION *);
  437 (* SQLSTATE *);
  438 (* SQLWARNING *);
  439 (* SQL_BIG_RESULT *);
  440 (* SQL_CALC_FOUND_ROWS *);
  441 (* SQL_SMALL_RESULT *);
  442 (* SSL *);
  443 (* STARTING *);
  444 (* STRAIGHT_JOIN *);
  445 (* TABLE *);
  446 (* TEMPORARY *);
  447 (* TEXT *);
  448 (* TERMINATED *);
  449 (* THEN *);
  450 (* TIME *);
  451 (* TIMESTAMP *);
  452 (* TINYBLOB *);
  453 (* TINYINT *);
  454 (* TINYTEXT *);
  455 (* TO *);
  456 (* TRAILING *);
  457 (* TRIGGER *);
  458 (* UNDO *);
  459 (* UNION *);
  460 (* UNIQUE *);
  461 (* UNLOCK *);
  462 (* UNSIGNED *);
  463 (* UPDATE *);
  464 (* USAGE *);
  465 (* USE *);
  466 (* USING *);
  467 (* UTC_DATE *);
  468 (* UTC_TIME *);
  469 (* UTC_TIMESTAMP *);
  470 (* VALUES *);
  471 (* VARBINARY *);
  472 (* VARCHAR *);
  473 (* VARYING *);
  474 (* WHEN *);
  475 (* WHERE *);
  476 (* WHILE *);
  477 (* WITH *);
  478 (* WRITE *);
  479 (* XOR *);
  480 (* YEAR *);
  481 (* YEAR_MONTH *);
  482 (* ZEROFILL *);
  483 (* PLUS *);
  484 (* MINUS *);
  485 (* SLASH *);
  486 (* ASTERISK *);
  487 (* EQUAL *);
  488 (* GREATEREQUAL *);
  489 (* GREATER *);
  490 (* LESSEQUAL *);
  491 (* LESS *);
  492 (* NOTEQUAL *);
  493 (* AMPERSAND *);
  494 (* TILDE *);
  495 (* VERTICALBAR *);
  496 (* HAT *);
  497 (* PERCENT *);
  498 (* LPAREN *);
  499 (* RPAREN *);
  500 (* COMMA *);
  501 (* DOT *);
  502 (* COLON *);
  503 (* SEMICOLON *);
  504 (* EXCLAMATION *);
  505 (* APOSTROPHE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* NAME *);
  258 (* STRING *);
  259 (* INTNUM *);
  260 (* BOOL *);
  261 (* APPROXNUM *);
  507 (* COMPARISON *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\003\000\004\000\005\000\005\000\006\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\008\000\
\008\000\008\000\009\000\009\000\002\000\011\000\012\000\012\000\
\012\000\013\000\013\000\019\000\014\000\014\000\014\000\021\000\
\021\000\021\000\022\000\022\000\022\000\024\000\020\000\020\000\
\020\000\023\000\023\000\025\000\025\000\026\000\026\000\026\000\
\029\000\029\000\029\000\029\000\027\000\027\000\030\000\028\000\
\028\000\031\000\031\000\032\000\015\000\015\000\016\000\016\000\
\033\000\033\000\034\000\034\000\017\000\017\000\018\000\018\000\
\035\000\035\000\036\000\036\000\037\000\037\000\037\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\038\000\038\000\039\000\000\000"

let yylen = "\002\000\
\001\000\002\000\001\000\007\000\001\000\001\000\003\000\004\000\
\001\000\004\000\001\000\004\000\001\000\004\000\006\000\000\000\
\001\000\002\000\000\000\004\000\001\000\010\000\000\000\001\000\
\001\000\001\000\003\000\002\000\003\000\001\000\003\000\003\000\
\001\000\002\000\002\000\004\000\002\000\003\000\000\000\001\000\
\002\000\001\000\002\000\005\000\005\000\000\000\001\000\001\000\
\001\000\002\000\001\000\002\000\000\000\001\000\002\000\000\000\
\004\000\001\000\003\000\001\000\000\000\002\000\000\000\003\000\
\001\000\003\000\001\000\003\000\000\000\002\000\000\000\003\000\
\001\000\003\000\002\000\004\000\000\000\001\000\001\000\001\000\
\003\000\001\000\001\000\001\000\001\000\001\000\003\000\003\000\
\005\000\003\000\003\000\003\000\003\000\002\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\003\000\
\004\000\003\000\005\000\001\000\002\000\004\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\003\000\021\000\
\000\000\024\000\025\000\000\000\002\000\005\000\000\000\000\000\
\082\000\083\000\085\000\084\000\000\000\000\000\086\000\000\000\
\000\000\000\000\000\000\026\000\000\000\000\000\000\000\000\000\
\108\000\000\000\000\000\000\000\000\000\040\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\028\000\000\000\000\000\
\000\000\000\000\006\000\081\000\000\000\000\000\106\000\109\000\
\087\000\088\000\000\000\041\000\000\000\000\000\104\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\030\000\000\000\000\000\
\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\105\000\000\000\035\000\000\000\000\000\000\000\
\000\000\000\000\000\000\048\000\047\000\000\000\000\000\000\000\
\042\000\000\000\000\000\037\000\000\000\000\000\000\000\000\000\
\017\000\000\000\004\000\007\000\000\000\107\000\000\000\000\000\
\038\000\029\000\032\000\000\000\000\000\031\000\000\000\000\000\
\050\000\052\000\043\000\000\000\000\000\000\000\000\000\000\000\
\018\000\000\000\008\000\036\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\010\000\014\000\000\000\012\000\000\000\
\000\000\064\000\000\000\000\000\000\000\000\000\000\000\000\000\
\054\000\000\000\000\000\000\000\000\000\000\000\000\000\022\000\
\000\000\000\000\044\000\045\000\015\000\020\000\068\000\066\000\
\000\000\072\000\000\000\000\000\078\000\079\000\000\000\075\000\
\000\000\060\000\000\000\058\000\000\000\074\000\057\000\000\000\
\076\000\059\000"

let yydgoto = "\002\000\
\005\000\006\000\007\000\015\000\058\000\059\000\093\000\122\000\
\147\000\026\000\102\000\012\000\027\000\085\000\107\000\136\000\
\152\000\166\000\028\000\054\000\086\000\087\000\112\000\088\000\
\113\000\114\000\168\000\179\000\115\000\169\000\195\000\196\000\
\162\000\163\000\186\000\187\000\192\000\032\000\033\000"

let yysindex = "\016\000\
\241\254\000\000\111\254\026\255\241\254\000\000\000\000\000\000\
\057\255\000\000\000\000\068\255\000\000\000\000\075\254\078\254\
\000\000\000\000\000\000\000\000\116\254\068\255\000\000\068\255\
\050\255\196\000\201\254\000\000\085\255\099\255\068\255\236\254\
\000\000\088\003\086\255\191\255\121\254\000\000\068\255\114\255\
\068\255\167\254\068\255\068\255\068\255\068\255\068\255\068\255\
\068\255\068\255\068\255\068\255\068\255\000\000\002\255\068\255\
\239\254\102\254\000\000\000\000\098\003\068\255\000\000\000\000\
\000\000\000\000\149\003\000\000\138\003\245\254\000\000\175\003\
\242\254\242\254\086\255\086\255\072\255\072\255\072\255\072\255\
\072\255\072\255\000\255\012\255\094\254\000\000\237\254\028\255\
\000\000\131\254\133\254\141\254\172\254\146\254\085\255\068\255\
\123\003\068\255\000\000\131\255\000\000\151\254\109\254\155\254\
\068\255\007\255\059\255\000\000\000\000\004\255\011\255\237\254\
\000\000\040\255\042\255\000\000\153\255\154\255\155\255\025\255\
\000\000\132\255\000\000\000\000\165\003\000\000\149\003\028\255\
\000\000\000\000\000\000\165\003\027\255\000\000\139\255\077\255\
\000\000\000\000\000\000\013\255\013\255\180\254\117\254\185\254\
\000\000\179\254\000\000\000\000\155\254\163\255\068\255\032\255\
\008\255\039\255\039\255\000\000\000\000\184\255\000\000\068\255\
\199\254\000\000\215\254\165\003\188\255\220\254\068\255\252\254\
\000\000\252\254\226\254\065\003\220\255\163\255\222\255\000\000\
\165\003\238\254\000\000\000\000\000\000\000\000\000\000\000\000\
\247\254\000\000\009\255\224\255\000\000\000\000\249\255\000\000\
\222\255\000\000\119\254\000\000\006\255\000\000\000\000\224\255\
\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\148\255\010\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\254\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\202\254\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\165\002\029\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\005\003\000\000\000\000\000\000\000\000\095\003\
\041\000\107\000\110\255\011\000\023\001\053\001\119\001\237\001\
\047\002\077\002\082\004\000\000\177\254\000\000\043\000\082\004\
\000\000\250\254\046\255\051\255\253\254\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\023\255\
\000\000\000\000\206\254\000\000\000\000\166\255\167\255\114\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\142\254\000\000\000\000\246\254\000\000\093\003\082\004\
\000\000\000\000\000\000\195\254\000\000\000\000\000\000\130\254\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\034\255\
\000\000\094\004\094\004\000\000\000\000\000\000\000\000\000\000\
\178\254\000\000\213\254\134\254\000\000\000\000\000\000\220\000\
\000\000\220\000\000\000\000\000\000\000\000\000\000\000\000\000\
\096\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\043\254\000\000\036\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\043\254\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\014\001\000\000\000\000\000\000\189\000\000\000\000\000\
\000\000\204\005\111\000\000\000\000\000\201\000\000\000\000\000\
\000\000\000\000\230\000\205\255\210\255\250\255\000\000\000\000\
\175\000\000\000\133\000\121\000\000\000\000\000\000\000\097\000\
\131\000\000\000\113\000\000\000\115\000\000\000\020\001"

let yytablesize = 1651
let yytable = "\080\000\
\038\000\041\000\083\000\189\000\061\000\061\000\067\000\083\000\
\080\000\090\000\080\000\040\000\083\000\083\000\080\000\069\000\
\001\000\108\000\189\000\070\000\003\000\009\000\062\000\062\000\
\016\000\055\000\039\000\083\000\038\000\094\000\077\000\101\000\
\010\000\077\000\063\000\080\000\116\000\104\000\094\000\040\000\
\094\000\065\000\070\000\009\000\071\000\062\000\190\000\120\000\
\063\000\121\000\016\000\017\000\018\000\019\000\020\000\110\000\
\105\000\014\000\110\000\134\000\029\000\190\000\061\000\067\000\
\080\000\094\000\030\000\080\000\016\000\017\000\018\000\019\000\
\020\000\013\000\021\000\109\000\148\000\031\000\011\000\080\000\
\062\000\106\000\080\000\080\000\011\000\057\000\149\000\041\000\
\094\000\095\000\110\000\063\000\021\000\080\000\094\000\130\000\
\106\000\094\000\065\000\060\000\080\000\041\000\080\000\157\000\
\158\000\199\000\200\000\066\000\080\000\094\000\093\000\008\000\
\094\000\094\000\068\000\008\000\117\000\091\000\118\000\093\000\
\069\000\093\000\099\000\094\000\070\000\009\000\119\000\009\000\
\019\000\019\000\094\000\128\000\094\000\154\000\155\000\037\000\
\123\000\129\000\094\000\080\000\080\000\131\000\135\000\140\000\
\111\000\141\000\093\000\137\000\023\000\023\000\023\000\023\000\
\023\000\004\000\138\000\142\000\143\000\144\000\145\000\146\000\
\150\000\151\000\080\000\161\000\160\000\067\000\156\000\061\000\
\067\000\094\000\094\000\159\000\023\000\165\000\167\000\093\000\
\004\000\013\000\093\000\013\000\004\000\022\000\011\000\023\000\
\011\000\062\000\171\000\173\000\056\000\039\000\093\000\080\000\
\094\000\093\000\093\000\004\000\063\000\031\000\092\000\022\000\
\039\000\023\000\174\000\065\000\093\000\178\000\041\000\110\000\
\080\000\175\000\176\000\093\000\181\000\093\000\046\000\047\000\
\080\000\080\000\004\000\093\000\183\000\094\000\185\000\188\000\
\194\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
\080\000\080\000\080\000\191\000\009\000\009\000\094\000\016\000\
\016\000\080\000\080\000\084\000\100\000\080\000\094\000\094\000\
\133\000\197\000\093\000\093\000\193\000\084\000\153\000\094\000\
\094\000\094\000\094\000\094\000\094\000\094\000\094\000\094\000\
\094\000\111\000\030\000\092\000\133\000\049\000\051\000\094\000\
\094\000\093\000\013\000\094\000\092\000\024\000\092\000\023\000\
\071\000\023\000\073\000\124\000\103\000\089\000\139\000\170\000\
\013\000\013\000\180\000\025\000\042\000\011\000\011\000\024\000\
\202\000\090\000\044\000\045\000\046\000\047\000\093\000\092\000\
\184\000\198\000\090\000\064\000\090\000\025\000\000\000\201\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\093\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\093\000\
\093\000\000\000\000\000\043\000\092\000\090\000\000\000\092\000\
\093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
\093\000\093\000\000\000\092\000\000\000\000\000\092\000\092\000\
\093\000\093\000\000\000\000\000\093\000\000\000\000\000\000\000\
\000\000\092\000\090\000\091\000\000\000\090\000\000\000\000\000\
\092\000\000\000\092\000\000\000\091\000\000\000\091\000\023\000\
\092\000\090\000\000\000\000\000\090\000\090\000\033\000\033\000\
\000\000\000\000\000\000\000\000\000\000\023\000\000\000\090\000\
\000\000\000\000\000\000\000\000\000\000\000\000\090\000\091\000\
\090\000\000\000\046\000\000\000\000\000\000\000\090\000\092\000\
\092\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\044\000\045\000\046\000\047\000\048\000\049\000\050\000\
\051\000\052\000\053\000\000\000\091\000\000\000\092\000\091\000\
\000\000\065\000\000\000\000\000\000\000\090\000\090\000\000\000\
\033\000\000\000\000\000\091\000\000\000\000\000\091\000\091\000\
\000\000\000\000\000\000\000\000\038\000\034\000\034\000\000\000\
\000\000\091\000\000\000\092\000\090\000\039\000\000\000\040\000\
\091\000\000\000\091\000\041\000\000\000\000\000\000\000\000\000\
\091\000\046\000\000\000\000\000\092\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\092\000\092\000\000\000\000\000\
\000\000\090\000\000\000\000\000\000\000\092\000\092\000\092\000\
\092\000\092\000\092\000\092\000\092\000\092\000\092\000\091\000\
\091\000\000\000\090\000\000\000\000\000\092\000\092\000\034\000\
\056\000\092\000\090\000\090\000\000\000\033\000\000\000\000\000\
\000\000\000\000\000\000\090\000\090\000\000\000\091\000\090\000\
\090\000\090\000\090\000\090\000\090\000\000\000\000\000\097\000\
\000\000\000\000\000\000\090\000\090\000\033\000\033\000\090\000\
\097\000\033\000\097\000\000\000\000\000\000\000\000\000\000\000\
\000\000\042\000\000\000\091\000\000\000\000\000\000\000\056\000\
\056\000\000\000\000\000\000\000\000\000\098\000\000\000\000\000\
\000\000\000\000\056\000\097\000\091\000\000\000\098\000\000\000\
\098\000\000\000\000\000\056\000\091\000\091\000\000\000\000\000\
\000\000\056\000\000\000\000\000\034\000\091\000\091\000\000\000\
\043\000\091\000\091\000\091\000\091\000\091\000\091\000\000\000\
\097\000\098\000\000\000\097\000\000\000\091\000\091\000\000\000\
\000\000\091\000\000\000\000\000\034\000\034\000\000\000\097\000\
\034\000\056\000\097\000\097\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\097\000\098\000\099\000\
\000\000\098\000\000\000\000\000\097\000\000\000\097\000\056\000\
\099\000\000\000\099\000\000\000\097\000\098\000\000\000\000\000\
\098\000\098\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\098\000\000\000\000\000\000\000\000\000\
\000\000\000\000\098\000\099\000\098\000\000\000\000\000\000\000\
\000\000\000\000\098\000\097\000\097\000\000\000\044\000\045\000\
\046\000\047\000\048\000\049\000\050\000\051\000\052\000\053\000\
\000\000\000\000\000\000\000\000\000\000\000\000\056\000\000\000\
\099\000\000\000\097\000\099\000\000\000\000\000\000\000\000\000\
\000\000\098\000\098\000\000\000\000\000\000\000\000\000\099\000\
\000\000\000\000\099\000\099\000\000\000\000\000\056\000\056\000\
\000\000\000\000\056\000\000\000\000\000\099\000\000\000\097\000\
\098\000\000\000\000\000\000\000\099\000\000\000\099\000\000\000\
\000\000\000\000\000\000\000\000\099\000\000\000\000\000\000\000\
\097\000\000\000\000\000\000\000\000\000\100\000\000\000\000\000\
\097\000\097\000\000\000\000\000\000\000\098\000\100\000\000\000\
\100\000\000\000\000\000\000\000\000\000\097\000\097\000\097\000\
\097\000\097\000\097\000\099\000\099\000\000\000\098\000\000\000\
\000\000\097\000\097\000\000\000\000\000\097\000\098\000\098\000\
\000\000\100\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\099\000\098\000\098\000\098\000\098\000\098\000\
\098\000\000\000\000\000\000\000\000\000\000\000\000\000\098\000\
\098\000\000\000\000\000\098\000\000\000\000\000\100\000\101\000\
\000\000\100\000\000\000\000\000\000\000\000\000\000\000\099\000\
\101\000\000\000\101\000\000\000\000\000\100\000\000\000\000\000\
\100\000\100\000\000\000\000\000\000\000\000\000\000\000\000\000\
\099\000\000\000\000\000\100\000\000\000\102\000\000\000\000\000\
\099\000\099\000\100\000\101\000\100\000\000\000\102\000\000\000\
\102\000\000\000\100\000\000\000\000\000\099\000\099\000\099\000\
\099\000\099\000\099\000\000\000\000\000\000\000\000\000\000\000\
\000\000\099\000\099\000\000\000\000\000\099\000\000\000\000\000\
\101\000\102\000\000\000\101\000\000\000\000\000\000\000\000\000\
\000\000\100\000\100\000\000\000\000\000\000\000\000\000\101\000\
\000\000\000\000\101\000\101\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\101\000\102\000\000\000\
\100\000\102\000\000\000\000\000\101\000\000\000\101\000\000\000\
\000\000\000\000\000\000\000\000\101\000\102\000\000\000\000\000\
\102\000\102\000\000\000\000\000\000\000\103\000\000\000\000\000\
\000\000\000\000\000\000\102\000\000\000\100\000\103\000\000\000\
\103\000\000\000\102\000\000\000\102\000\000\000\000\000\000\000\
\000\000\000\000\102\000\101\000\101\000\000\000\100\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\100\000\100\000\
\000\000\103\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\101\000\100\000\100\000\100\000\100\000\100\000\
\100\000\102\000\102\000\000\000\000\000\000\000\000\000\100\000\
\100\000\000\000\000\000\100\000\000\000\000\000\103\000\000\000\
\000\000\103\000\000\000\000\000\000\000\000\000\000\000\101\000\
\102\000\000\000\000\000\000\000\000\000\103\000\000\000\000\000\
\103\000\103\000\000\000\000\000\000\000\000\000\000\000\000\000\
\101\000\000\000\000\000\103\000\000\000\095\000\000\000\000\000\
\101\000\101\000\103\000\000\000\103\000\102\000\095\000\000\000\
\095\000\000\000\103\000\000\000\000\000\101\000\101\000\101\000\
\101\000\101\000\101\000\000\000\000\000\000\000\102\000\000\000\
\000\000\101\000\101\000\000\000\000\000\101\000\102\000\102\000\
\000\000\095\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\103\000\103\000\102\000\102\000\102\000\102\000\102\000\
\102\000\000\000\000\000\000\000\000\000\000\000\000\000\102\000\
\102\000\000\000\000\000\102\000\000\000\000\000\095\000\000\000\
\103\000\095\000\039\000\000\000\000\000\000\000\000\000\000\000\
\041\000\000\000\000\000\000\000\000\000\095\000\000\000\000\000\
\095\000\095\000\000\000\000\000\000\000\089\000\000\000\096\000\
\000\000\000\000\000\000\095\000\000\000\103\000\089\000\041\000\
\089\000\000\000\096\000\039\000\095\000\000\000\000\000\000\000\
\000\000\041\000\095\000\000\000\000\000\000\000\103\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\103\000\103\000\
\000\000\089\000\000\000\096\000\039\000\000\000\000\000\000\000\
\000\000\000\000\041\000\000\000\000\000\000\000\000\000\000\000\
\000\000\095\000\095\000\098\000\000\000\000\000\000\000\103\000\
\103\000\041\000\000\000\103\000\000\000\000\000\089\000\000\000\
\096\000\089\000\000\000\096\000\041\000\000\000\042\000\000\000\
\095\000\000\000\000\000\000\000\000\000\089\000\039\000\096\000\
\089\000\089\000\096\000\096\000\041\000\000\000\000\000\000\000\
\039\000\000\000\000\000\089\000\000\000\096\000\041\000\126\000\
\000\000\000\000\000\000\000\000\089\000\095\000\096\000\042\000\
\000\000\000\000\089\000\000\000\096\000\043\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\095\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\095\000\095\000\
\042\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\089\000\089\000\096\000\096\000\000\000\043\000\042\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\095\000\
\095\000\000\000\042\000\095\000\000\000\000\000\000\000\000\000\
\089\000\000\000\096\000\000\000\000\000\000\000\000\000\043\000\
\000\000\000\000\042\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\042\000\000\000\043\000\000\000\
\000\000\000\000\000\000\000\000\000\000\089\000\000\000\096\000\
\000\000\000\000\096\000\044\000\045\000\046\000\047\000\048\000\
\049\000\050\000\051\000\052\000\053\000\000\000\089\000\000\000\
\096\000\043\000\000\000\182\000\000\000\000\000\089\000\089\000\
\096\000\096\000\044\000\045\000\046\000\047\000\048\000\049\000\
\050\000\051\000\052\000\053\000\044\000\045\000\046\000\047\000\
\048\000\049\000\050\000\051\000\052\000\053\000\000\000\089\000\
\089\000\096\000\096\000\089\000\000\000\096\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\044\000\045\000\046\000\
\047\000\048\000\049\000\050\000\051\000\052\000\053\000\000\000\
\000\000\000\000\000\000\000\000\044\000\045\000\046\000\047\000\
\048\000\049\000\050\000\051\000\052\000\053\000\039\000\044\000\
\045\000\046\000\047\000\048\000\049\000\050\000\051\000\052\000\
\053\000\000\000\053\000\000\000\055\000\000\000\000\000\044\000\
\045\000\046\000\047\000\048\000\049\000\050\000\051\000\052\000\
\053\000\044\000\045\000\046\000\047\000\048\000\049\000\050\000\
\051\000\052\000\053\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\039\000\039\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\039\000\053\000\053\000\055\000\055\000\000\000\000\000\000\000\
\000\000\039\000\000\000\000\000\053\000\000\000\055\000\039\000\
\000\000\000\000\000\000\000\000\000\000\053\000\000\000\055\000\
\000\000\000\000\000\000\053\000\000\000\055\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\039\000\000\000\000\000\000\000\000\000\000\000\039\000\
\000\000\034\000\000\000\035\000\036\000\000\000\000\000\000\000\
\000\000\000\000\061\000\053\000\000\000\055\000\000\000\000\000\
\000\000\000\000\067\000\000\000\069\000\039\000\072\000\073\000\
\074\000\075\000\076\000\077\000\078\000\079\000\080\000\081\000\
\082\000\053\000\000\000\055\000\000\000\000\000\000\000\000\000\
\000\000\097\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\039\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\125\000\039\000\127\000\000\000\053\000\
\000\000\055\000\000\000\000\000\132\000\000\000\000\000\000\000\
\053\000\000\000\055\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\039\000\039\000\000\000\000\000\
\039\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\053\000\053\000\055\000\055\000\053\000\000\000\055\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\164\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\172\000\000\000\000\000\000\000\000\000\
\000\000\000\000\177\000"

let yycheck = "\001\001\
\001\001\016\001\001\001\013\001\084\001\085\001\085\001\001\001\
\010\001\027\001\012\001\012\001\001\001\001\001\016\001\142\001\
\001\000\037\001\013\001\142\001\036\001\028\001\084\001\085\001\
\028\001\081\001\081\001\001\001\001\001\001\001\244\001\083\000\
\007\001\247\001\085\001\037\001\088\000\084\000\010\001\012\001\
\012\001\085\001\132\001\189\001\134\001\066\001\056\001\132\001\
\069\001\134\001\001\001\002\001\003\001\004\001\005\001\066\001\
\219\001\001\001\069\001\106\000\242\001\056\001\142\001\142\001\
\066\001\037\001\245\001\069\001\001\001\002\001\003\001\004\001\
\005\001\028\001\025\001\095\001\128\000\218\001\028\001\081\001\
\142\001\244\001\084\001\085\001\059\001\001\001\133\000\016\001\
\243\001\244\001\110\001\142\001\025\001\095\001\066\001\243\001\
\244\001\069\001\142\001\001\001\102\001\016\001\104\001\243\001\
\244\001\243\001\244\001\243\001\110\001\081\001\001\001\001\000\
\084\001\085\001\001\001\005\000\242\001\135\001\242\001\010\001\
\247\001\012\001\134\001\095\001\247\001\132\001\242\001\134\001\
\243\001\244\001\102\001\001\001\104\001\140\000\141\000\025\000\
\247\001\243\001\110\001\141\001\142\001\243\001\084\001\104\001\
\164\001\104\001\037\001\144\001\001\001\002\001\003\001\004\001\
\005\001\169\001\144\001\003\001\003\001\003\001\134\001\028\001\
\022\001\085\001\164\001\001\001\242\001\244\001\243\001\247\001\
\247\001\141\001\142\001\243\001\025\001\142\001\136\001\066\001\
\169\001\132\001\069\001\134\001\169\001\132\001\132\001\134\001\
\134\001\247\001\003\001\245\001\244\001\244\001\081\001\193\001\
\164\001\084\001\085\001\169\001\247\001\218\001\216\001\132\001\
\010\001\134\001\244\001\247\001\095\001\210\001\016\001\218\001\
\210\001\022\001\247\001\102\001\243\001\104\001\229\001\230\001\
\218\001\219\001\169\001\110\001\001\001\193\001\001\001\242\001\
\001\001\227\001\228\001\229\001\230\001\231\001\232\001\233\001\
\234\001\235\001\236\001\245\001\243\001\244\001\210\001\243\001\
\244\001\243\001\244\001\242\001\245\001\247\001\218\001\219\001\
\242\001\001\001\141\001\142\001\244\001\242\001\242\001\227\001\
\228\001\229\001\230\001\231\001\232\001\233\001\234\001\235\001\
\236\001\000\000\244\001\001\001\242\001\104\001\104\001\243\001\
\244\001\164\001\005\000\247\001\010\001\228\001\012\001\132\001\
\247\001\134\001\247\001\095\000\084\000\056\000\112\000\155\000\
\243\001\244\001\170\000\242\001\102\001\243\001\244\001\228\001\
\200\000\001\001\227\001\228\001\229\001\230\001\193\001\037\001\
\174\000\193\000\010\001\032\000\012\001\242\001\255\255\197\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\210\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\218\001\
\219\001\255\255\255\255\141\001\066\001\037\001\255\255\069\001\
\227\001\228\001\229\001\230\001\231\001\232\001\233\001\234\001\
\235\001\236\001\255\255\081\001\255\255\255\255\084\001\085\001\
\243\001\244\001\255\255\255\255\247\001\255\255\255\255\255\255\
\255\255\095\001\066\001\001\001\255\255\069\001\255\255\255\255\
\102\001\255\255\104\001\255\255\010\001\255\255\012\001\228\001\
\110\001\081\001\255\255\255\255\084\001\085\001\084\001\085\001\
\255\255\255\255\255\255\255\255\255\255\242\001\255\255\095\001\
\255\255\255\255\255\255\255\255\255\255\255\255\102\001\037\001\
\104\001\255\255\104\001\255\255\255\255\255\255\110\001\141\001\
\142\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\227\001\228\001\229\001\230\001\231\001\232\001\233\001\
\234\001\235\001\236\001\255\255\066\001\255\255\164\001\069\001\
\255\255\243\001\255\255\255\255\255\255\141\001\142\001\255\255\
\142\001\255\255\255\255\081\001\255\255\255\255\084\001\085\001\
\255\255\255\255\255\255\255\255\001\001\084\001\085\001\255\255\
\255\255\095\001\255\255\193\001\164\001\010\001\255\255\012\001\
\102\001\255\255\104\001\016\001\255\255\255\255\255\255\255\255\
\110\001\104\001\255\255\255\255\210\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\218\001\219\001\255\255\255\255\
\255\255\193\001\255\255\255\255\255\255\227\001\228\001\229\001\
\230\001\231\001\232\001\233\001\234\001\235\001\236\001\141\001\
\142\001\255\255\210\001\255\255\255\255\243\001\244\001\142\001\
\037\001\247\001\218\001\219\001\255\255\219\001\255\255\255\255\
\255\255\255\255\255\255\227\001\228\001\255\255\164\001\231\001\
\232\001\233\001\234\001\235\001\236\001\255\255\255\255\001\001\
\255\255\255\255\255\255\243\001\244\001\243\001\244\001\247\001\
\010\001\247\001\012\001\255\255\255\255\255\255\255\255\255\255\
\255\255\102\001\255\255\193\001\255\255\255\255\255\255\084\001\
\085\001\255\255\255\255\255\255\255\255\001\001\255\255\255\255\
\255\255\255\255\095\001\037\001\210\001\255\255\010\001\255\255\
\012\001\255\255\255\255\104\001\218\001\219\001\255\255\255\255\
\255\255\110\001\255\255\255\255\219\001\227\001\228\001\255\255\
\141\001\231\001\232\001\233\001\234\001\235\001\236\001\255\255\
\066\001\037\001\255\255\069\001\255\255\243\001\244\001\255\255\
\255\255\247\001\255\255\255\255\243\001\244\001\255\255\081\001\
\247\001\142\001\084\001\085\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\095\001\066\001\001\001\
\255\255\069\001\255\255\255\255\102\001\255\255\104\001\164\001\
\010\001\255\255\012\001\255\255\110\001\081\001\255\255\255\255\
\084\001\085\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\095\001\255\255\255\255\255\255\255\255\
\255\255\255\255\102\001\037\001\104\001\255\255\255\255\255\255\
\255\255\255\255\110\001\141\001\142\001\255\255\227\001\228\001\
\229\001\230\001\231\001\232\001\233\001\234\001\235\001\236\001\
\255\255\255\255\255\255\255\255\255\255\255\255\219\001\255\255\
\066\001\255\255\164\001\069\001\255\255\255\255\255\255\255\255\
\255\255\141\001\142\001\255\255\255\255\255\255\255\255\081\001\
\255\255\255\255\084\001\085\001\255\255\255\255\243\001\244\001\
\255\255\255\255\247\001\255\255\255\255\095\001\255\255\193\001\
\164\001\255\255\255\255\255\255\102\001\255\255\104\001\255\255\
\255\255\255\255\255\255\255\255\110\001\255\255\255\255\255\255\
\210\001\255\255\255\255\255\255\255\255\001\001\255\255\255\255\
\218\001\219\001\255\255\255\255\255\255\193\001\010\001\255\255\
\012\001\255\255\255\255\255\255\255\255\231\001\232\001\233\001\
\234\001\235\001\236\001\141\001\142\001\255\255\210\001\255\255\
\255\255\243\001\244\001\255\255\255\255\247\001\218\001\219\001\
\255\255\037\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\164\001\231\001\232\001\233\001\234\001\235\001\
\236\001\255\255\255\255\255\255\255\255\255\255\255\255\243\001\
\244\001\255\255\255\255\247\001\255\255\255\255\066\001\001\001\
\255\255\069\001\255\255\255\255\255\255\255\255\255\255\193\001\
\010\001\255\255\012\001\255\255\255\255\081\001\255\255\255\255\
\084\001\085\001\255\255\255\255\255\255\255\255\255\255\255\255\
\210\001\255\255\255\255\095\001\255\255\001\001\255\255\255\255\
\218\001\219\001\102\001\037\001\104\001\255\255\010\001\255\255\
\012\001\255\255\110\001\255\255\255\255\231\001\232\001\233\001\
\234\001\235\001\236\001\255\255\255\255\255\255\255\255\255\255\
\255\255\243\001\244\001\255\255\255\255\247\001\255\255\255\255\
\066\001\037\001\255\255\069\001\255\255\255\255\255\255\255\255\
\255\255\141\001\142\001\255\255\255\255\255\255\255\255\081\001\
\255\255\255\255\084\001\085\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\095\001\066\001\255\255\
\164\001\069\001\255\255\255\255\102\001\255\255\104\001\255\255\
\255\255\255\255\255\255\255\255\110\001\081\001\255\255\255\255\
\084\001\085\001\255\255\255\255\255\255\001\001\255\255\255\255\
\255\255\255\255\255\255\095\001\255\255\193\001\010\001\255\255\
\012\001\255\255\102\001\255\255\104\001\255\255\255\255\255\255\
\255\255\255\255\110\001\141\001\142\001\255\255\210\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\218\001\219\001\
\255\255\037\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\164\001\231\001\232\001\233\001\234\001\235\001\
\236\001\141\001\142\001\255\255\255\255\255\255\255\255\243\001\
\244\001\255\255\255\255\247\001\255\255\255\255\066\001\255\255\
\255\255\069\001\255\255\255\255\255\255\255\255\255\255\193\001\
\164\001\255\255\255\255\255\255\255\255\081\001\255\255\255\255\
\084\001\085\001\255\255\255\255\255\255\255\255\255\255\255\255\
\210\001\255\255\255\255\095\001\255\255\001\001\255\255\255\255\
\218\001\219\001\102\001\255\255\104\001\193\001\010\001\255\255\
\012\001\255\255\110\001\255\255\255\255\231\001\232\001\233\001\
\234\001\235\001\236\001\255\255\255\255\255\255\210\001\255\255\
\255\255\243\001\244\001\255\255\255\255\247\001\218\001\219\001\
\255\255\037\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\141\001\142\001\231\001\232\001\233\001\234\001\235\001\
\236\001\255\255\255\255\255\255\255\255\255\255\255\255\243\001\
\244\001\255\255\255\255\247\001\255\255\255\255\066\001\255\255\
\164\001\069\001\010\001\255\255\255\255\255\255\255\255\255\255\
\016\001\255\255\255\255\255\255\255\255\081\001\255\255\255\255\
\084\001\085\001\255\255\255\255\255\255\001\001\255\255\001\001\
\255\255\255\255\255\255\095\001\255\255\193\001\010\001\016\001\
\012\001\255\255\012\001\010\001\104\001\255\255\255\255\255\255\
\255\255\016\001\110\001\255\255\255\255\255\255\210\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\218\001\219\001\
\255\255\037\001\255\255\037\001\010\001\255\255\255\255\255\255\
\255\255\255\255\016\001\255\255\255\255\255\255\255\255\255\255\
\255\255\141\001\142\001\010\001\255\255\255\255\255\255\243\001\
\244\001\016\001\255\255\247\001\255\255\255\255\066\001\255\255\
\066\001\069\001\255\255\069\001\016\001\255\255\102\001\255\255\
\164\001\255\255\255\255\255\255\255\255\081\001\010\001\081\001\
\084\001\085\001\084\001\085\001\016\001\255\255\255\255\255\255\
\010\001\255\255\255\255\095\001\255\255\095\001\016\001\069\001\
\255\255\255\255\255\255\255\255\104\001\193\001\104\001\102\001\
\255\255\255\255\110\001\255\255\110\001\141\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\210\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\218\001\219\001\
\102\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\141\001\142\001\141\001\142\001\255\255\141\001\102\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\243\001\
\244\001\255\255\102\001\247\001\255\255\255\255\255\255\255\255\
\164\001\255\255\164\001\255\255\255\255\255\255\255\255\141\001\
\255\255\255\255\102\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\102\001\255\255\141\001\255\255\
\255\255\255\255\255\255\255\255\255\255\193\001\255\255\193\001\
\255\255\255\255\193\001\227\001\228\001\229\001\230\001\231\001\
\232\001\233\001\234\001\235\001\236\001\255\255\210\001\255\255\
\210\001\141\001\255\255\243\001\255\255\255\255\218\001\219\001\
\218\001\219\001\227\001\228\001\229\001\230\001\231\001\232\001\
\233\001\234\001\235\001\236\001\227\001\228\001\229\001\230\001\
\231\001\232\001\233\001\234\001\235\001\236\001\255\255\243\001\
\244\001\243\001\244\001\247\001\255\255\247\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\227\001\228\001\229\001\
\230\001\231\001\232\001\233\001\234\001\235\001\236\001\255\255\
\255\255\255\255\255\255\255\255\227\001\228\001\229\001\230\001\
\231\001\232\001\233\001\234\001\235\001\236\001\037\001\227\001\
\228\001\229\001\230\001\231\001\232\001\233\001\234\001\235\001\
\236\001\255\255\037\001\255\255\037\001\255\255\255\255\227\001\
\228\001\229\001\230\001\231\001\232\001\233\001\234\001\235\001\
\236\001\227\001\228\001\229\001\230\001\231\001\232\001\233\001\
\234\001\235\001\236\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\084\001\085\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\095\001\084\001\085\001\084\001\085\001\255\255\255\255\255\255\
\255\255\104\001\255\255\255\255\095\001\255\255\095\001\110\001\
\255\255\255\255\255\255\255\255\255\255\104\001\255\255\104\001\
\255\255\255\255\255\255\110\001\255\255\110\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\136\001\255\255\255\255\255\255\255\255\255\255\142\001\
\255\255\022\000\255\255\024\000\025\000\255\255\255\255\255\255\
\255\255\255\255\031\000\142\001\255\255\142\001\255\255\255\255\
\255\255\255\255\039\000\255\255\041\000\164\001\043\000\044\000\
\045\000\046\000\047\000\048\000\049\000\050\000\051\000\052\000\
\053\000\164\001\255\255\164\001\255\255\255\255\255\255\255\255\
\255\255\062\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\210\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\096\000\219\001\098\000\255\255\210\001\
\255\255\210\001\255\255\255\255\105\000\255\255\255\255\255\255\
\219\001\255\255\219\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\243\001\244\001\255\255\255\255\
\247\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\243\001\244\001\243\001\244\001\247\001\255\255\247\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\151\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\160\000\255\255\255\255\255\255\255\255\
\255\255\255\255\167\000"

let yynames_const = "\
  ADD\000\
  ALL\000\
  ALTER\000\
  ANALYZE\000\
  AND\000\
  ANY\000\
  AS\000\
  ASC\000\
  AUTO_INCREMENT\000\
  BEFORE\000\
  BETWEEN\000\
  BIGINT\000\
  BINARY\000\
  BIT\000\
  BLOB\000\
  BOTH\000\
  BY\000\
  CALL\000\
  CASCADE\000\
  CASE\000\
  CHANGE\000\
  CHAR\000\
  CHECK\000\
  COLLATE\000\
  COLUMN\000\
  COMMENT\000\
  CONDITION\000\
  CONSTRAINT\000\
  CONTINUE\000\
  CONVERT\000\
  CREATE\000\
  CROSS\000\
  CURRENT_DATE\000\
  CURRENT_TIME\000\
  CURRENT_TIMESTAMP\000\
  CURRENT_USER\000\
  CURSOR\000\
  DATABASE\000\
  DATABASES\000\
  DATE\000\
  DATETIME\000\
  DAY_HOUR\000\
  DAY_MICROSECOND\000\
  DAY_MINUTE\000\
  DAY_SECOND\000\
  DECIMAL\000\
  DECLARE\000\
  DEFAULT\000\
  DELAYED\000\
  DELETE\000\
  DESC\000\
  DESCRIBE\000\
  DETERMINISTIC\000\
  DISTINCT\000\
  DISTINCTROW\000\
  DIV\000\
  DOUBLE\000\
  DROP\000\
  DUAL\000\
  EACH\000\
  ELSE\000\
  ELSEIF\000\
  ENCLOSED\000\
  END\000\
  ENUM\000\
  ESCAPE\000\
  ESCAPED\000\
  EXISTS\000\
  EXIT\000\
  EXPLAIN\000\
  FETCH\000\
  FLOAT\000\
  FOR\000\
  FORCE\000\
  FOREIGN\000\
  FROM\000\
  FULLTEXT\000\
  GRANT\000\
  GROUP\000\
  HAVING\000\
  HIGH_PRIORITY\000\
  HOUR_MICROSECOND\000\
  HOUR_MINUTE\000\
  HOUR_SECOND\000\
  IF\000\
  IGNORE\000\
  IN\000\
  INDEX\000\
  INFILE\000\
  INNER\000\
  INOUT\000\
  INSENSITIVE\000\
  INSERT\000\
  INTEGER\000\
  INTERVAL\000\
  INTO\000\
  IS\000\
  ITERATE\000\
  JOIN\000\
  KEY\000\
  KEYS\000\
  KILL\000\
  LEADING\000\
  LEAVE\000\
  LEFT\000\
  LIKE\000\
  LIMIT\000\
  LINES\000\
  LOAD\000\
  LOCALTIME\000\
  LOCALTIMESTAMP\000\
  LOCK\000\
  LONG\000\
  LONGBLOB\000\
  LONGTEXT\000\
  LOOP\000\
  LOW_PRIORITY\000\
  MATCH\000\
  MEDIUMBLOB\000\
  MEDIUMINT\000\
  MEDIUMTEXT\000\
  MINUTE_MICROSECOND\000\
  MINUTE_SECOND\000\
  MOD\000\
  MODIFIES\000\
  NATURAL\000\
  NOT\000\
  NO_WRITE_TO_BINLOG\000\
  NULLX\000\
  NUMBER\000\
  ON\000\
  ONDUPLICATE\000\
  OPTIMIZE\000\
  OPTION\000\
  OPTIONALLY\000\
  OR\000\
  ORDER\000\
  OUT\000\
  OUTER\000\
  OUTFILE\000\
  PRECISION\000\
  PRIMARY\000\
  PROCEDURE\000\
  PURGE\000\
  QUICK\000\
  READ\000\
  READS\000\
  REAL\000\
  REFERENCES\000\
  REGEXP\000\
  RELEASE\000\
  RENAME\000\
  REPEAT\000\
  REPLACE\000\
  REQUIRE\000\
  RESTRICT\000\
  RETURN\000\
  REVOKE\000\
  RIGHT\000\
  ROLLUP\000\
  SCHEMA\000\
  SCHEMAS\000\
  SECOND_MICROSECOND\000\
  SELECT\000\
  SENSITIVE\000\
  SEPARATOR\000\
  SET\000\
  SHOW\000\
  SMALLINT\000\
  SOME\000\
  SONAME\000\
  SPATIAL\000\
  SPECIFIC\000\
  SQL\000\
  SQLEXCEPTION\000\
  SQLSTATE\000\
  SQLWARNING\000\
  SQL_BIG_RESULT\000\
  SQL_CALC_FOUND_ROWS\000\
  SQL_SMALL_RESULT\000\
  SSL\000\
  STARTING\000\
  STRAIGHT_JOIN\000\
  TABLE\000\
  TEMPORARY\000\
  TEXT\000\
  TERMINATED\000\
  THEN\000\
  TIME\000\
  TIMESTAMP\000\
  TINYBLOB\000\
  TINYINT\000\
  TINYTEXT\000\
  TO\000\
  TRAILING\000\
  TRIGGER\000\
  UNDO\000\
  UNION\000\
  UNIQUE\000\
  UNLOCK\000\
  UNSIGNED\000\
  UPDATE\000\
  USAGE\000\
  USE\000\
  USING\000\
  UTC_DATE\000\
  UTC_TIME\000\
  UTC_TIMESTAMP\000\
  VALUES\000\
  VARBINARY\000\
  VARCHAR\000\
  VARYING\000\
  WHEN\000\
  WHERE\000\
  WHILE\000\
  WITH\000\
  WRITE\000\
  XOR\000\
  YEAR\000\
  YEAR_MONTH\000\
  ZEROFILL\000\
  PLUS\000\
  MINUS\000\
  SLASH\000\
  ASTERISK\000\
  EQUAL\000\
  GREATEREQUAL\000\
  GREATER\000\
  LESSEQUAL\000\
  LESS\000\
  NOTEQUAL\000\
  AMPERSAND\000\
  TILDE\000\
  VERTICALBAR\000\
  HAT\000\
  PERCENT\000\
  LPAREN\000\
  RPAREN\000\
  COMMA\000\
  DOT\000\
  COLON\000\
  SEMICOLON\000\
  EXCLAMATION\000\
  APOSTROPHE\000\
  EOF\000\
  "

let yynames_block = "\
  NAME\000\
  STRING\000\
  INTNUM\000\
  BOOL\000\
  APPROXNUM\000\
  COMPARISON\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 294 "sqlparser.mly"
                 ( [_1] )
# 1331 "sqlparser.ml"
               : Sqlsyntax.t list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Sqlsyntax.t list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 295 "sqlparser.mly"
                 ( _2 :: _1 )
# 1339 "sqlparser.ml"
               : Sqlsyntax.t list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'create_table_stmt) in
    Obj.repr(
# 301 "sqlparser.mly"
                    ( _1 )
# 1346 "sqlparser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'table_name_def) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'column_def_list) in
    Obj.repr(
# 310 "sqlparser.mly"
  (
       CreateTableStmt(
             _3,
             List.rev _5
       )
  )
# 1359 "sqlparser.ml"
               : 'create_table_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 318 "sqlparser.mly"
       ( _1 )
# 1366 "sqlparser.ml"
               : 'table_name_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'column_def) in
    Obj.repr(
# 321 "sqlparser.mly"
             ( [_1] )
# 1373 "sqlparser.ml"
               : 'column_def_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'column_def_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'column_def) in
    Obj.repr(
# 322 "sqlparser.mly"
                                   ( _3 :: _1 )
# 1381 "sqlparser.ml"
               : 'column_def_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'datatype_def) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_notnull) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'opt_check) in
    Obj.repr(
# 325 "sqlparser.mly"
                                          ( { c_column = _1; c_datatype = _2; c_notnull = _3; c_check = _4} )
# 1391 "sqlparser.ml"
               : 'column_def))
; (fun __caml_parser_env ->
    Obj.repr(
# 328 "sqlparser.mly"
       ( Char(None) )
# 1397 "sqlparser.ml"
               : 'datatype_def))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 329 "sqlparser.mly"
                            ( Char(Some(_3)) )
# 1404 "sqlparser.ml"
               : 'datatype_def))
; (fun __caml_parser_env ->
    Obj.repr(
# 330 "sqlparser.mly"
          ( Varchar(None) )
# 1410 "sqlparser.ml"
               : 'datatype_def))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 331 "sqlparser.mly"
                               ( Varchar(Some(_3)) )
# 1417 "sqlparser.ml"
               : 'datatype_def))
; (fun __caml_parser_env ->
    Obj.repr(
# 332 "sqlparser.mly"
         ( Number(None, None) )
# 1423 "sqlparser.ml"
               : 'datatype_def))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 333 "sqlparser.mly"
                              ( Number(Some(_3), None) )
# 1430 "sqlparser.ml"
               : 'datatype_def))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 334 "sqlparser.mly"
                                           ( Number(Some(_3), Some(_5)) )
# 1438 "sqlparser.ml"
               : 'datatype_def))
; (fun __caml_parser_env ->
    Obj.repr(
# 337 "sqlparser.mly"
  ( None )
# 1444 "sqlparser.ml"
               : 'opt_notnull))
; (fun __caml_parser_env ->
    Obj.repr(
# 338 "sqlparser.mly"
        ( None )
# 1450 "sqlparser.ml"
               : 'opt_notnull))
; (fun __caml_parser_env ->
    Obj.repr(
# 339 "sqlparser.mly"
            ( Some(NotNull) )
# 1456 "sqlparser.ml"
               : 'opt_notnull))
; (fun __caml_parser_env ->
    Obj.repr(
# 342 "sqlparser.mly"
  ( None )
# 1462 "sqlparser.ml"
               : 'opt_check))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 343 "sqlparser.mly"
                           ( Some(Check(_3)) )
# 1469 "sqlparser.ml"
               : 'opt_check))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'select_stmt) in
    Obj.repr(
# 349 "sqlparser.mly"
              ( _1 )
# 1476 "sqlparser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : 'select_opts) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : 'select_expr_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'table_references) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : 'opt_where) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'opt_groupby) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'opt_having) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'opt_orderby) in
    Obj.repr(
# 362 "sqlparser.mly"
  (   
       SelectStmt(
             _2,
             _3,
             _5,
             _6,
             _7,
             _8,
             _9
        )
  )
# 1499 "sqlparser.ml"
               : 'select_stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 379 "sqlparser.mly"
  ( All )
# 1505 "sqlparser.ml"
               : 'select_opts))
; (fun __caml_parser_env ->
    Obj.repr(
# 380 "sqlparser.mly"
           ( All )
# 1511 "sqlparser.ml"
               : 'select_opts))
; (fun __caml_parser_env ->
    Obj.repr(
# 381 "sqlparser.mly"
           ( Distinct )
# 1517 "sqlparser.ml"
               : 'select_opts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'select_expr) in
    Obj.repr(
# 384 "sqlparser.mly"
              ( [_1] )
# 1524 "sqlparser.ml"
               : 'select_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'select_expr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'select_expr) in
    Obj.repr(
# 385 "sqlparser.mly"
                                     ( _3 :: _1 )
# 1532 "sqlparser.ml"
               : 'select_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_as_alias) in
    Obj.repr(
# 389 "sqlparser.mly"
                    ( { s_expr = _1 ; s_alias = _2 } )
# 1540 "sqlparser.ml"
               : 'select_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'table_references) in
    Obj.repr(
# 396 "sqlparser.mly"
                                 ( _2 )
# 1547 "sqlparser.ml"
               : 'table_references))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'table_reference) in
    Obj.repr(
# 399 "sqlparser.mly"
                  ( [_1] )
# 1554 "sqlparser.ml"
               : 'table_references))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'table_references) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'table_reference) in
    Obj.repr(
# 400 "sqlparser.mly"
                                         ( _3 :: _1 )
# 1562 "sqlparser.ml"
               : 'table_references))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'table_reference) in
    Obj.repr(
# 403 "sqlparser.mly"
                                ( _2 )
# 1569 "sqlparser.ml"
               : 'table_reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'table_factor) in
    Obj.repr(
# 406 "sqlparser.mly"
               ( { from_table = _1 ; from_join = None} )
# 1576 "sqlparser.ml"
               : 'table_reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'table_factor) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'join_tables) in
    Obj.repr(
# 407 "sqlparser.mly"
                           ( { from_table = _1 ; from_join = Some(_2)} )
# 1584 "sqlparser.ml"
               : 'table_reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_as_alias) in
    Obj.repr(
# 410 "sqlparser.mly"
                             ( { t_schema = "";
                                 t_table  = Some(_1);
                                 t_subquery = None;
                                 t_alias  = _2 } )
# 1595 "sqlparser.ml"
               : 'table_factor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'opt_as_alias) in
    Obj.repr(
# 414 "sqlparser.mly"
                             ( { t_schema = _1;
                                 t_table  = Some(_3);
                                 t_subquery = None;
                                 t_alias  = _4 } )
# 1607 "sqlparser.ml"
               : 'table_factor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'table_subquery) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_as_alias) in
    Obj.repr(
# 418 "sqlparser.mly"
                             ( { t_schema = "";
                                 t_table  = None;
                                 t_subquery = Some(_1);
                                 t_alias  = _2 } )
# 1618 "sqlparser.ml"
               : 'table_factor))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'select_stmt) in
    Obj.repr(
# 424 "sqlparser.mly"
                            ( _2 )
# 1625 "sqlparser.ml"
               : 'table_subquery))
; (fun __caml_parser_env ->
    Obj.repr(
# 427 "sqlparser.mly"
  ( "" )
# 1631 "sqlparser.ml"
               : 'opt_as_alias))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 428 "sqlparser.mly"
          ( _1 )
# 1638 "sqlparser.ml"
               : 'opt_as_alias))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 429 "sqlparser.mly"
          ( _2 )
# 1645 "sqlparser.ml"
               : 'opt_as_alias))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'join_table_) in
    Obj.repr(
# 433 "sqlparser.mly"
              ( [_1] )
# 1652 "sqlparser.ml"
               : 'join_tables))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'join_tables) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'join_table_) in
    Obj.repr(
# 434 "sqlparser.mly"
                          ( _2 :: _1 )
# 1660 "sqlparser.ml"
               : 'join_tables))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'opt_inner_cross) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'table_factor) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'opt_join_condition) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'opt_join_using) in
    Obj.repr(
# 438 "sqlparser.mly"
              ({ join_type  = _1;
                 join_table = _3;
                 join_cond  = _4;
                 join_using = _5 })
# 1673 "sqlparser.ml"
               : 'join_table_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'left_or_right) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'table_factor) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'opt_join_condition) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'opt_join_using) in
    Obj.repr(
# 444 "sqlparser.mly"
              ({ join_type  = _1;
                 join_table = _3;
                 join_cond  = _4;
                 join_using = _5  })
# 1686 "sqlparser.ml"
               : 'join_table_))
; (fun __caml_parser_env ->
    Obj.repr(
# 450 "sqlparser.mly"
  ( Inner )
# 1692 "sqlparser.ml"
               : 'opt_inner_cross))
; (fun __caml_parser_env ->
    Obj.repr(
# 451 "sqlparser.mly"
        ( Inner )
# 1698 "sqlparser.ml"
               : 'opt_inner_cross))
; (fun __caml_parser_env ->
    Obj.repr(
# 452 "sqlparser.mly"
        ( Cross )
# 1704 "sqlparser.ml"
               : 'opt_inner_cross))
; (fun __caml_parser_env ->
    Obj.repr(
# 455 "sqlparser.mly"
              ( Left )
# 1710 "sqlparser.ml"
               : 'left_or_right))
; (fun __caml_parser_env ->
    Obj.repr(
# 456 "sqlparser.mly"
              ( Left )
# 1716 "sqlparser.ml"
               : 'left_or_right))
; (fun __caml_parser_env ->
    Obj.repr(
# 457 "sqlparser.mly"
              ( Right )
# 1722 "sqlparser.ml"
               : 'left_or_right))
; (fun __caml_parser_env ->
    Obj.repr(
# 458 "sqlparser.mly"
              ( Right )
# 1728 "sqlparser.ml"
               : 'left_or_right))
; (fun __caml_parser_env ->
    Obj.repr(
# 461 "sqlparser.mly"
  ( None )
# 1734 "sqlparser.ml"
               : 'opt_join_condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'join_condition) in
    Obj.repr(
# 462 "sqlparser.mly"
                 ( Some(_1) )
# 1741 "sqlparser.ml"
               : 'opt_join_condition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 465 "sqlparser.mly"
          ( _2 )
# 1748 "sqlparser.ml"
               : 'join_condition))
; (fun __caml_parser_env ->
    Obj.repr(
# 468 "sqlparser.mly"
  ( None )
# 1754 "sqlparser.ml"
               : 'opt_join_using))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'column_list) in
    Obj.repr(
# 469 "sqlparser.mly"
                                  ( Some(_3) )
# 1761 "sqlparser.ml"
               : 'opt_join_using))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'column) in
    Obj.repr(
# 472 "sqlparser.mly"
         ( [_1] )
# 1768 "sqlparser.ml"
               : 'column_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'column_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'column) in
    Obj.repr(
# 473 "sqlparser.mly"
                           ( _3 :: _1 )
# 1776 "sqlparser.ml"
               : 'column_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 476 "sqlparser.mly"
       ( Column("",_1) )
# 1783 "sqlparser.ml"
               : 'column))
; (fun __caml_parser_env ->
    Obj.repr(
# 483 "sqlparser.mly"
  ( None )
# 1789 "sqlparser.ml"
               : 'opt_where))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 484 "sqlparser.mly"
             ( Some(Where(_2)) )
# 1796 "sqlparser.ml"
               : 'opt_where))
; (fun __caml_parser_env ->
    Obj.repr(
# 490 "sqlparser.mly"
  ( None )
# 1802 "sqlparser.ml"
               : 'opt_groupby))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'groupby_list) in
    Obj.repr(
# 491 "sqlparser.mly"
                        ( Some(_3) )
# 1809 "sqlparser.ml"
               : 'opt_groupby))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'groupby_column) in
    Obj.repr(
# 494 "sqlparser.mly"
                 ( [_1] )
# 1816 "sqlparser.ml"
               : 'groupby_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'groupby_column) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'groupby_list) in
    Obj.repr(
# 495 "sqlparser.mly"
                                    ( _1 :: _3 )
# 1824 "sqlparser.ml"
               : 'groupby_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 498 "sqlparser.mly"
               ( {group_column_ref_table = "" ; group_column_name = _1 } )
# 1831 "sqlparser.ml"
               : 'groupby_column))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 499 "sqlparser.mly"
                 ( {group_column_ref_table = _1 ; group_column_name = _3 } )
# 1839 "sqlparser.ml"
               : 'groupby_column))
; (fun __caml_parser_env ->
    Obj.repr(
# 506 "sqlparser.mly"
  ( None )
# 1845 "sqlparser.ml"
               : 'opt_having))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 507 "sqlparser.mly"
              ( Some(_2) )
# 1852 "sqlparser.ml"
               : 'opt_having))
; (fun __caml_parser_env ->
    Obj.repr(
# 513 "sqlparser.mly"
  ( None )
# 1858 "sqlparser.ml"
               : 'opt_orderby))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'orderby_list) in
    Obj.repr(
# 514 "sqlparser.mly"
                        ( Some(_3) )
# 1865 "sqlparser.ml"
               : 'opt_orderby))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ordering_column) in
    Obj.repr(
# 517 "sqlparser.mly"
                  ( [ _1 ] )
# 1872 "sqlparser.ml"
               : 'orderby_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ordering_column) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'orderby_list) in
    Obj.repr(
# 518 "sqlparser.mly"
                                     ( _1 :: _3 )
# 1880 "sqlparser.ml"
               : 'orderby_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_asc_desc) in
    Obj.repr(
# 521 "sqlparser.mly"
                    ( {order_column_ref_table = "" ; order_column_name = _1 ; order_column_dir = _2 } )
# 1888 "sqlparser.ml"
               : 'ordering_column))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'opt_asc_desc) in
    Obj.repr(
# 522 "sqlparser.mly"
                             ( {order_column_ref_table = _1 ; order_column_name = _3 ; order_column_dir = _4 } )
# 1897 "sqlparser.ml"
               : 'ordering_column))
; (fun __caml_parser_env ->
    Obj.repr(
# 525 "sqlparser.mly"
  ( Asc )
# 1903 "sqlparser.ml"
               : 'opt_asc_desc))
; (fun __caml_parser_env ->
    Obj.repr(
# 526 "sqlparser.mly"
       ( Asc )
# 1909 "sqlparser.ml"
               : 'opt_asc_desc))
; (fun __caml_parser_env ->
    Obj.repr(
# 527 "sqlparser.mly"
       ( Desc )
# 1915 "sqlparser.ml"
               : 'opt_asc_desc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 534 "sqlparser.mly"
                  ( Name(_1) )
# 1922 "sqlparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 535 "sqlparser.mly"
                  ( Column(_1, _3) )
# 1930 "sqlparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 536 "sqlparser.mly"
                ( String(_1) )
# 1937 "sqlparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 537 "sqlparser.mly"
                ( Int(_1) )
# 1944 "sqlparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 538 "sqlparser.mly"
                ( Float(_1) )
# 1951 "sqlparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 539 "sqlparser.mly"
                ( Bool(_1) )
# 1958 "sqlparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 540 "sqlparser.mly"
                ( Null("null") )
# 1964 "sqlparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 543 "sqlparser.mly"
                     ( _2 )
# 1971 "sqlparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'select_stmt) in
    Obj.repr(
# 546 "sqlparser.mly"
                            ( _2 )
# 1978 "sqlparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 549 "sqlparser.mly"
                                       ( Between(_1, _3, _5) )
# 1987 "sqlparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 552 "sqlparser.mly"
                      ( Plus(_1, _3) )
# 1995 "sqlparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 553 "sqlparser.mly"
                      ( Minus(_1, _3) )
# 2003 "sqlparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 554 "sqlparser.mly"
                      ( Multi(_1, _3) )
# 2011 "sqlparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 555 "sqlparser.mly"
                      ( Div(_1, _3) )
# 2019 "sqlparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 557 "sqlparser.mly"
                          ( Uminus(_2) )
# 2026 "sqlparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 558 "sqlparser.mly"
                      ( And(_1, _3) )
# 2034 "sqlparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 559 "sqlparser.mly"
                      ( Or(_1, _3) )
# 2042 "sqlparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 561 "sqlparser.mly"
                         ( Equal(_1, _3) )
# 2050 "sqlparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 562 "sqlparser.mly"
                         ( GreaterEqual(_1, _3) )
# 2058 "sqlparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 563 "sqlparser.mly"
                         ( Greater(_1, _3) )
# 2066 "sqlparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 564 "sqlparser.mly"
                         ( LessEqual(_1, _3) )
# 2074 "sqlparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 565 "sqlparser.mly"
                         ( Less(_1, _3) )
# 2082 "sqlparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 566 "sqlparser.mly"
                         ( NotEqual(_1, _3) )
# 2090 "sqlparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 573 "sqlparser.mly"
                      ( Not(_2) )
# 2097 "sqlparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 576 "sqlparser.mly"
                ( IsNull(_1) )
# 2104 "sqlparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    Obj.repr(
# 577 "sqlparser.mly"
                    ( Not(IsNull(_1)) )
# 2111 "sqlparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'case_list) in
    Obj.repr(
# 599 "sqlparser.mly"
                                    ( Case(None,     _2, None) )
# 2118 "sqlparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'case_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 600 "sqlparser.mly"
                                    ( Case(None,     _2, Some(_4)) )
# 2126 "sqlparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'case) in
    Obj.repr(
# 603 "sqlparser.mly"
       ( [_1] )
# 2133 "sqlparser.ml"
               : 'case_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'case_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'case) in
    Obj.repr(
# 604 "sqlparser.mly"
                  ( _2 :: _1 )
# 2141 "sqlparser.ml"
               : 'case_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 607 "sqlparser.mly"
                      ( When(_2, _4) )
# 2149 "sqlparser.ml"
               : 'case))
(* Entry stmt_list *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let stmt_list (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Sqlsyntax.t list)
;;
